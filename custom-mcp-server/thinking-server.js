#!/usr/bin/env node
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { CallToolRequestSchema, ListToolsRequestSchema, } from "@modelcontextprotocol/sdk/types.js";
// Serveur MCP custom pour la r√©flexion et l'analyse
const server = new Server({
    name: "thinking-assistant",
    version: "1.0.0",
}, {
    capabilities: {
        tools: {},
    },
});
// Outil pour analyser et r√©fl√©chir sur un probl√®me
server.setRequestHandler(ListToolsRequestSchema, async () => {
    return {
        tools: [
            {
                name: "analyze_problem",
                description: "Analyser un probl√®me de mani√®re structur√©e et proposer des solutions",
                inputSchema: {
                    type: "object",
                    properties: {
                        problem: {
                            type: "string",
                            description: "Le probl√®me √† analyser",
                        },
                        context: {
                            type: "string",
                            description: "Contexte suppl√©mentaire (optionnel)",
                        },
                    },
                    required: ["problem"],
                },
            },
            {
                name: "step_by_step_thinking",
                description: "D√©composer une t√¢che complexe en √©tapes logiques",
                inputSchema: {
                    type: "object",
                    properties: {
                        task: {
                            type: "string",
                            description: "La t√¢che √† d√©composer",
                        },
                        goal: {
                            type: "string",
                            description: "L'objectif final",
                        },
                    },
                    required: ["task"],
                },
            },
            {
                name: "pros_and_cons",
                description: "Analyser les avantages et inconv√©nients d'une d√©cision",
                inputSchema: {
                    type: "object",
                    properties: {
                        decision: {
                            type: "string",
                            description: "La d√©cision √† analyser",
                        },
                        criteria: {
                            type: "array",
                            items: {
                                type: "string",
                            },
                            description: "Crit√®res d'√©valuation (optionnel)",
                        },
                    },
                    required: ["decision"],
                },
            },
            {
                name: "creative_brainstorm",
                description: "G√©n√©rer des id√©es cr√©atives pour un sujet donn√©",
                inputSchema: {
                    type: "object",
                    properties: {
                        topic: {
                            type: "string",
                            description: "Le sujet pour le brainstorming",
                        },
                        quantity: {
                            type: "number",
                            description: "Nombre d'id√©es √† g√©n√©rer (d√©faut: 5)",
                        },
                    },
                    required: ["topic"],
                },
            },
        ],
    };
});
// Gestion des appels d'outils
server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const { name, arguments: args } = request.params;
    switch (name) {
        case "analyze_problem":
            const problem = args.problem;
            const context = args.context || "";
            const analysis = `
üîç **ANALYSE DU PROBL√àME**

**Probl√®me identifi√©:**
${problem}

${context ? `**Contexte:**\n${context}\n` : ""}

**Analyse structur√©e:**
1. **Nature du probl√®me:** ${categorizeeProblem(problem)}
2. **Causes possibles:** ${getPossibleCauses(problem)}
3. **Impact:** ${assessImpact(problem)}
4. **Urgence:** ${assessUrgency(problem)}

**Solutions recommand√©es:**
${generateSolutions(problem)}

**Prochaines √©tapes:**
${getNextSteps(problem)}
      `;
            return {
                content: [
                    {
                        type: "text",
                        text: analysis,
                    },
                ],
            };
        case "step_by_step_thinking":
            const task = args.task;
            const goal = args.goal || "Accomplir la t√¢che";
            const steps = `
üìã **D√âCOMPOSITION √âTAPE PAR √âTAPE**

**T√¢che:** ${task}
**Objectif:** ${goal}

**Plan d'action:**
${generateSteps(task, goal)}

**Points de contr√¥le:**
${generateCheckpoints(task)}

**Ressources n√©cessaires:**
${identifyResources(task)}
      `;
            return {
                content: [
                    {
                        type: "text",
                        text: steps,
                    },
                ],
            };
        case "pros_and_cons":
            const decision = args.decision;
            const criteria = args.criteria || [];
            const analysis_pc = `
‚öñÔ∏è **ANALYSE AVANTAGES/INCONV√âNIENTS**

**D√©cision:** ${decision}

**‚úÖ AVANTAGES:**
${generatePros(decision)}

**‚ùå INCONV√âNIENTS:**
${generateCons(decision)}

${criteria.length > 0 ? `**üìä √âVALUATION SELON VOS CRIT√àRES:**\n${evaluateByCriteria(decision, criteria)}` : ""}

**üéØ RECOMMANDATION:**
${makeRecommendation(decision)}
      `;
            return {
                content: [
                    {
                        type: "text",
                        text: analysis_pc,
                    },
                ],
            };
        case "creative_brainstorm":
            const topic = args.topic;
            const quantity = args.quantity || 5;
            const ideas = `
üí° **BRAINSTORMING CR√âATIF**

**Sujet:** ${topic}

**Id√©es g√©n√©r√©es:**
${generateCreativeIdeas(topic, quantity)}

**Id√©es bonus (approches diff√©rentes):**
${generateAlternativeApproaches(topic)}

**Conseils pour d√©velopper ces id√©es:**
${getImplementationTips(topic)}
      `;
            return {
                content: [
                    {
                        type: "text",
                        text: ideas,
                    },
                ],
            };
        default:
            throw new Error(`Outil inconnu: ${name}`);
    }
});
// Fonctions utilitaires
function categorizeeProblem(problem) {
    if (problem.toLowerCase().includes("technique"))
        return "Probl√®me technique";
    if (problem.toLowerCase().includes("communication"))
        return "Probl√®me de communication";
    if (problem.toLowerCase().includes("organisation"))
        return "Probl√®me organisationnel";
    return "Probl√®me g√©n√©ral n√©cessitant une analyse approfondie";
}
function getPossibleCauses(_problem) {
    return `
‚Ä¢ Facteurs techniques ou syst√©miques
‚Ä¢ Manque d'informations ou de ressources
‚Ä¢ Probl√®mes de communication ou coordination
‚Ä¢ Contraintes de temps ou de budget
‚Ä¢ Facteurs externes impr√©visibles`;
}
function assessImpact(_problem) {
    return "Impact √† √©valuer selon votre contexte sp√©cifique";
}
function assessUrgency(_problem) {
    return "Urgence √† d√©terminer selon vos priorit√©s";
}
function generateSolutions(_problem) {
    return `
1. **Solution imm√©diate:** Action directe pour r√©soudre rapidement
2. **Solution √† moyen terme:** Approche progressive et planifi√©e
3. **Solution pr√©ventive:** Mesures pour √©viter la r√©currence
4. **Solution alternative:** Approche cr√©ative ou contournement`;
}
function getNextSteps(_problem) {
    return `
1. Valider l'analyse avec les parties prenantes
2. Prioriser les solutions selon vos ressources
3. √âtablir un plan d'action avec √©ch√©ances
4. Mettre en place des indicateurs de suivi`;
}
function generateSteps(_task, _goal) {
    return `
1. **Pr√©paration:** Rassembler les informations et ressources n√©cessaires
2. **Planification:** D√©finir l'approche et les jalons
3. **Ex√©cution:** Mettre en ≈ìuvre les actions planifi√©es
4. **Contr√¥le:** V√©rifier la progression et ajuster si n√©cessaire
5. **Finalisation:** Compl√©ter la t√¢che et valider l'atteinte de l'objectif`;
}
function generateCheckpoints(_task) {
    return `
‚Ä¢ Point de contr√¥le 25% : Validation de la pr√©paration
‚Ä¢ Point de contr√¥le 50% : √âvaluation de la progression
‚Ä¢ Point de contr√¥le 75% : Ajustements et optimisations
‚Ä¢ Point de contr√¥le 100% : Validation finale et livrables`;
}
function identifyResources(_task) {
    return `
‚Ä¢ **Humaines:** Comp√©tences et disponibilit√© des personnes
‚Ä¢ **Mat√©rielles:** Outils, √©quipements, infrastructure
‚Ä¢ **Informationnelles:** Documentation, donn√©es, connaissances
‚Ä¢ **Temporelles:** D√©lais et planning
‚Ä¢ **Financi√®res:** Budget et co√ªts associ√©s`;
}
function generatePros(_decision) {
    return `
‚Ä¢ Avantage potentiel 1 : B√©n√©fice direct identifiable
‚Ä¢ Avantage potentiel 2 : Impact positif √† long terme
‚Ä¢ Avantage potentiel 3 : Opportunit√©s cr√©√©es
‚Ä¢ Avantage potentiel 4 : Risques √©vit√©s ou r√©duits`;
}
function generateCons(_decision) {
    return `
‚Ä¢ Inconv√©nient potentiel 1 : Co√ªts ou efforts requis
‚Ä¢ Inconv√©nient potentiel 2 : Risques associ√©s
‚Ä¢ Inconv√©nient potentiel 3 : Opportunit√©s manqu√©es
‚Ä¢ Inconv√©nient potentiel 4 : Complications possibles`;
}
function evaluateByCriteria(_decision, criteria) {
    return criteria
        .map((criterion) => `‚Ä¢ **${criterion}:** √âvaluation selon ce crit√®re`)
        .join("\n");
}
function makeRecommendation(_decision) {
    return "Sur la base de cette analyse, √©valuez les facteurs les plus importants pour votre situation sp√©cifique avant de prendre une d√©cision finale.";
}
function generateCreativeIdeas(topic, quantity) {
    const ideas = [];
    for (let i = 1; i <= quantity; i++) {
        ideas.push(`${i}. Id√©e cr√©ative ${i} : Approche innovante pour ${topic}`);
    }
    return ideas.join("\n");
}
function generateAlternativeApproaches(_topic) {
    return `
‚Ä¢ **Approche inverse:** Partir de la fin et remonter vers le d√©but
‚Ä¢ **Approche collaborative:** Impliquer d'autres perspectives
‚Ä¢ **Approche minimale:** Version simplifi√©e pour tester rapidement
‚Ä¢ **Approche disruptive:** Remettre en question les suppositions de base`;
}
function getImplementationTips(_topic) {
    return `
‚Ä¢ Commencer petit et it√©rer rapidement
‚Ä¢ Obtenir des retours d'exp√©rience pr√©coces
‚Ä¢ Documenter le processus et les apprentissages
‚Ä¢ Rester flexible et adaptable aux changements`;
}
// D√©marrage du serveur
const transport = new StdioServerTransport();
server.connect(transport);
console.error("Thinking Assistant MCP Server running on stdio");
