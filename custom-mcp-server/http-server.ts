#!/usr/bin/env node

import { createServer } from "http";
import { URL } from "url";

// Port pour Railway (utilise la variable d'environnement PORT ou 3000 par d√©faut)
const PORT = process.env.PORT || 3000;

// Fonctions utilitaires (copi√©es de thinking-server.ts)
function categorizeeProblem(problem: string): string {
  if (problem.toLowerCase().includes("performance"))
    return "Probl√®me de performance";
  if (problem.toLowerCase().includes("bug")) return "Probl√®me technique";
  if (
    problem.toLowerCase().includes("user") ||
    problem.toLowerCase().includes("utilisateur")
  )
    return "Probl√®me utilisateur";
  return "Probl√®me g√©n√©ral";
}

function getPossibleCauses(_problem: string): string {
  return `
‚Ä¢ Facteurs techniques
‚Ä¢ Facteurs humains  
‚Ä¢ Facteurs organisationnels
‚Ä¢ Facteurs externes`;
}

function assessImpact(_problem: string): string {
  return "Impact moyen √† √©valuer selon le contexte";
}

function assessUrgency(_problem: string): string {
  return "Urgence √† d√©terminer selon les priorit√©s";
}

function generateSolutions(_problem: string): string {
  return `
1. **Solution imm√©diate:** Action rapide pour stabiliser
2. **Solution interm√©diaire:** Am√©lioration progressive
3. **Solution long terme:** Refonte compl√®te si n√©cessaire`;
}

function getNextSteps(_problem: string): string {
  return `
1. D√©finir les priorit√©s
2. Rassembler les ressources n√©cessaires
3. Mettre en place un plan d'action
4. Suivre les progr√®s`;
}

function generateSteps(_task: string, _goal: string): string {
  return `
1. **Pr√©paration:** Analyser les requirements
2. **Planification:** D√©finir la roadmap
3. **Ex√©cution:** Impl√©menter √©tape par √©tape
4. **Validation:** Tester et valider
5. **D√©ploiement:** Mise en production`;
}

function generateCheckpoints(_task: string): string {
  return `
‚Ä¢ Checkpoint 25% : Validation de l'approche
‚Ä¢ Checkpoint 50% : Premi√®re version fonctionnelle
‚Ä¢ Checkpoint 75% : Tests et ajustements
‚Ä¢ Checkpoint 100% : Livraison finale`;
}

function identifyResources(_task: string): string {
  return `
‚Ä¢ **Humaines:** √âquipe, expertise, temps
‚Ä¢ **Techniques:** Outils, infrastructure, technologies
‚Ä¢ **Financi√®res:** Budget, investissements`;
}

function generatePros(_decision: string): string {
  return `
‚Ä¢ Am√©lioration potentielle de la situation
‚Ä¢ Opportunit√©s de croissance
‚Ä¢ R√©solution de probl√®mes existants`;
}

function generateCons(_decision: string): string {
  return `
‚Ä¢ Risques potentiels
‚Ä¢ Co√ªts d'impl√©mentation
‚Ä¢ R√©sistance au changement`;
}

function evaluateByCriteria(_decision: string, criteria: string[]): string {
  return criteria
    .map((criterion) => `‚Ä¢ **${criterion}:** Impact √† √©valuer`)
    .join("\n");
}

function makeRecommendation(_decision: string): string {
  return "Analyser soigneusement tous les aspects avant de prendre une d√©cision finale.";
}

function generateCreativeIdeas(topic: string, quantity: number): string {
  const ideas = [];
  for (let i = 1; i <= quantity; i++) {
    ideas.push(`${i}. Id√©e cr√©ative n¬∞${i} pour "${topic}"`);
  }
  return ideas.join("\n");
}

function generateAlternativeApproaches(_topic: string): string {
  return `
‚Ä¢ Approche traditionnelle
‚Ä¢ Approche innovante
‚Ä¢ Approche hybride`;
}

function getImplementationTips(_topic: string): string {
  return `
‚Ä¢ Commencer petit et it√©rer
‚Ä¢ Impliquer les parties prenantes
‚Ä¢ Mesurer les r√©sultats`;
}

// Logique des outils MCP
async function executeAnalyzeProblem(args: any) {
  const problem = args.problem as string;
  const context = (args.context as string) || "";

  const analysis = `
üîç **ANALYSE DU PROBL√àME**

**Probl√®me identifi√©:**
${problem}

${context ? `**Contexte:**\n${context}\n` : ""}

**Analyse structur√©e:**
1. **Nature du probl√®me:** ${categorizeeProblem(problem)}
2. **Causes possibles:** ${getPossibleCauses(problem)}
3. **Impact:** ${assessImpact(problem)}
4. **Urgence:** ${assessUrgency(problem)}

**Solutions recommand√©es:**
${generateSolutions(problem)}

**Prochaines √©tapes:**
${getNextSteps(problem)}
  `;

  return {
    content: [
      {
        type: "text",
        text: analysis,
      },
    ],
  };
}

async function executeStepByStepThinking(args: any) {
  const task = args.task as string;
  const goal = (args.goal as string) || "Accomplir la t√¢che";

  const steps = `
üìã **D√âCOMPOSITION √âTAPE PAR √âTAPE**

**T√¢che:** ${task}
**Objectif:** ${goal}

**Plan d'action:**
${generateSteps(task, goal)}

**Points de contr√¥le:**
${generateCheckpoints(task)}

**Ressources n√©cessaires:**
${identifyResources(task)}
  `;

  return {
    content: [
      {
        type: "text",
        text: steps,
      },
    ],
  };
}

async function executeProsAndCons(args: any) {
  const decision = args.decision as string;
  const criteria = (args.criteria as string[]) || [];

  const analysis = `
‚öñÔ∏è **ANALYSE AVANTAGES/INCONV√âNIENTS**

**D√©cision:** ${decision}

**‚úÖ AVANTAGES:**
${generatePros(decision)}

**‚ùå INCONV√âNIENTS:**
${generateCons(decision)}

${criteria.length > 0 ? `**üìä √âVALUATION SELON VOS CRIT√àRES:**\n${evaluateByCriteria(decision, criteria)}` : ""}

**üéØ RECOMMANDATION:**
${makeRecommendation(decision)}
  `;

  return {
    content: [
      {
        type: "text",
        text: analysis,
      },
    ],
  };
}

async function executeCreativeBrainstorm(args: any) {
  const topic = args.topic as string;
  const quantity = (args.quantity as number) || 5;

  const brainstorm = `
üí° **BRAINSTORMING CR√âATIF**

**Sujet:** ${topic}

**üéØ ID√âES G√âN√âR√âES:**
${generateCreativeIdeas(topic, quantity)}

**üîÑ APPROCHES ALTERNATIVES:**
${generateAlternativeApproaches(topic)}

**üíº CONSEILS D'IMPL√âMENTATION:**
${getImplementationTips(topic)}
  `;

  return {
    content: [
      {
        type: "text",
        text: brainstorm,
      },
    ],
  };
}

// Configuration des outils disponibles
const tools = [
  {
    name: "analyze_problem",
    description:
      "Analyser un probl√®me de mani√®re structur√©e et proposer des solutions",
    inputSchema: {
      type: "object",
      properties: {
        problem: {
          type: "string",
          description: "Le probl√®me √† analyser",
        },
        context: {
          type: "string",
          description: "Contexte suppl√©mentaire (optionnel)",
        },
      },
      required: ["problem"],
    },
  },
  {
    name: "step_by_step_thinking",
    description: "D√©composer une t√¢che complexe en √©tapes logiques",
    inputSchema: {
      type: "object",
      properties: {
        task: {
          type: "string",
          description: "La t√¢che √† d√©composer",
        },
        goal: {
          type: "string",
          description: "L'objectif final",
        },
      },
      required: ["task"],
    },
  },
  {
    name: "pros_and_cons",
    description: "Analyser les avantages et inconv√©nients d'une d√©cision",
    inputSchema: {
      type: "object",
      properties: {
        decision: {
          type: "string",
          description: "La d√©cision √† analyser",
        },
        criteria: {
          type: "array",
          items: {
            type: "string",
          },
          description: "Crit√®res d'√©valuation (optionnel)",
        },
      },
      required: ["decision"],
    },
  },
  {
    name: "creative_brainstorm",
    description: "G√©n√©rer des id√©es cr√©atives pour un sujet donn√©",
    inputSchema: {
      type: "object",
      properties: {
        topic: {
          type: "string",
          description: "Le sujet pour le brainstorming",
        },
        quantity: {
          type: "number",
          description: "Nombre d'id√©es √† g√©n√©rer (d√©faut: 5)",
        },
      },
      required: ["topic"],
    },
  },
];

// Serveur HTTP
const server = createServer(async (req, res) => {
  // Configuration CORS
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") {
    res.writeHead(200);
    res.end();
    return;
  }

  const url = new URL(req.url!, `http://${req.headers.host}`);

  try {
    if (req.method === "GET" && url.pathname === "/") {
      // Page d'accueil avec documentation
      res.writeHead(200, { "Content-Type": "text/html" });
      res.end(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>Thinking Assistant MCP Server</title>
          <meta charset="utf-8">
          <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            pre { background: #f5f5f5; padding: 10px; border-radius: 5px; }
            code { background: #f0f0f0; padding: 2px 4px; border-radius: 3px; }
          </style>
        </head>
        <body>
          <h1>üß† Thinking Assistant MCP Server</h1>
          <p>Serveur MCP pour la r√©flexion et l'analyse structur√©e</p>
          
          <h2>üîß Endpoints disponibles:</h2>
          <ul>
            <li><code>GET /</code> - Cette page d'accueil</li>
            <li><code>GET /tools</code> - Liste des outils disponibles</li>
            <li><code>POST /tools/:toolName</code> - Ex√©cuter un outil</li>
            <li><code>GET /health</code> - V√©rification de sant√©</li>
          </ul>
          
          <h2>üõ†Ô∏è Outils disponibles:</h2>
          <ul>
            <li><strong>analyze_problem</strong> - Analyser un probl√®me</li>
            <li><strong>step_by_step_thinking</strong> - D√©composer une t√¢che</li>
            <li><strong>pros_and_cons</strong> - Analyser les avantages/inconv√©nients</li>
            <li><strong>creative_brainstorm</strong> - Brainstorming cr√©atif</li>
          </ul>
          
          <h2>üìö Exemple d'utilisation:</h2>
          <pre>
curl -X POST ${req.headers.host ? `http://${req.headers.host}` : "https://votre-app.railway.app"}/tools/analyze_problem \\
  -H "Content-Type: application/json" \\
  -d '{"problem": "Comment am√©liorer les performances de mon application?"}'
          </pre>
          
          <p><a href="/tools">Voir les outils disponibles (JSON)</a></p>
        </body>
        </html>
      `);
    } else if (req.method === "GET" && url.pathname === "/health") {
      // Health check pour Railway
      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(
        JSON.stringify({
          status: "healthy",
          timestamp: new Date().toISOString(),
        }),
      );
    } else if (req.method === "GET" && url.pathname === "/tools") {
      // Liste des outils
      res.writeHead(200, { "Content-Type": "application/json" });
      res.end(JSON.stringify({ tools }, null, 2));
    } else if (req.method === "POST" && url.pathname.startsWith("/tools/")) {
      // Ex√©cution d'un outil
      const toolName = url.pathname.split("/")[2];

      let body = "";
      req.on("data", (chunk) => {
        body += chunk.toString();
      });

      req.on("end", async () => {
        try {
          const args = JSON.parse(body);
          let result;

          switch (toolName) {
            case "analyze_problem":
              result = await executeAnalyzeProblem(args);
              break;
            case "step_by_step_thinking":
              result = await executeStepByStepThinking(args);
              break;
            case "pros_and_cons":
              result = await executeProsAndCons(args);
              break;
            case "creative_brainstorm":
              result = await executeCreativeBrainstorm(args);
              break;
            default:
              res.writeHead(404, { "Content-Type": "application/json" });
              res.end(
                JSON.stringify({ error: `Tool '${toolName}' not found` }),
              );
              return;
          }

          res.writeHead(200, { "Content-Type": "application/json" });
          res.end(JSON.stringify(result, null, 2));
        } catch (error: any) {
          res.writeHead(400, { "Content-Type": "application/json" });
          res.end(
            JSON.stringify({ error: `Invalid request: ${error.message}` }),
          );
        }
      });
    } else {
      // 404
      res.writeHead(404, { "Content-Type": "application/json" });
      res.end(JSON.stringify({ error: "Endpoint not found" }));
    }
  } catch (error: any) {
    res.writeHead(500, { "Content-Type": "application/json" });
    res.end(JSON.stringify({ error: `Server error: ${error.message}` }));
  }
});

server.listen(Number(PORT), "0.0.0.0", () => {
  console.log(`üöÄ Thinking Assistant MCP Server running on port ${PORT}`);
  console.log(`üì± Health check: http://localhost:${PORT}/health`);
  console.log(`üõ†Ô∏è Tools API: http://localhost:${PORT}/tools`);
  console.log(`üìñ Documentation: http://localhost:${PORT}/`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || "development"}`);
  console.log(`üïê Started at: ${new Date().toISOString()}`);
});

// Gestion gracieuse de l'arr√™t
process.on("SIGTERM", () => {
  console.log("üõë SIGTERM received, shutting down gracefully...");
  server.close(() => {
    console.log("‚úÖ Server closed successfully");
    process.exit(0);
  });
});

process.on("SIGINT", () => {
  console.log("üõë SIGINT received, shutting down gracefully...");
  server.close(() => {
    console.log("‚úÖ Server closed successfully");
    process.exit(0);
  });
});

export default server;
